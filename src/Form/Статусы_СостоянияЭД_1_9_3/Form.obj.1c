//Форма исключительно для УФ

&НаСервереБезКонтекста
Процедура ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Ини, КаталогНастроек) Экспорт
	// дублирует статусы по идентификаторам пакетов при получении списка изменений
	Для Каждого СоставПакета Из МассивДокументов Цикл
		Если СоставПакета.Свойство("Документы1С") Тогда  
			Для Каждого Строка Из СоставПакета.Документы1С Цикл
				ДублироватьСостояние(СоставПакета, Строка.значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам,Ини,КаталогНастроек) Экспорт
	// добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
	Для Каждого Элемент Из ДанныеПоСтатусам Цикл
		СоставПакета=новый структура("Состояние",новый структура());
		СоставПакета.Состояние.вставить("Название",Элемент.СтруктураСвойств.ДокументСБИС_Статус);
		СоставПакета.вставить("Идентификатор", 	Элемент.СтруктураСвойств.ДокументСБИС_Ид);
		ДублироватьСостояние(СоставПакета, Элемент.Документ1С);
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста
функция ДублироватьСостояние(СоставПакета, ДокСсылка, XMLДокумента=неопределено, СтруктураФайла=неопределено) экспорт
	ПараметрыИсточника = Новый ТаблицаЗначений;
	ПараметрыИсточника.Колонки.Добавить("Тип");
	ПараметрыИсточника.Колонки.Добавить("ФормированиеУниверсальногоДокумента");
	ПараметрыИсточника.Колонки.Добавить("Направление");
	ПараметрыИсточника.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	ПараметрыИсточника.Колонки.Добавить("Контрагент", Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
	ПараметрыИсточника.Колонки.Добавить("ДоговорКонтрагента", Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(ДокСсылка, ПараметрыИсточника); // будут обработаны только те документы, которые поддерживает конфигурация
	Если ПараметрыИсточника.Количество()>0 Тогда
		ПараметрыЭД = ПараметрыИсточника[0];
		
		Если не СоставПакета.Свойство("Направление")  Тогда
			СоставПакета.Вставить("Направление", ПараметрыЭД.Направление);
		КонецЕсли;
		
	    если значениеЗаполнено(ПараметрыЭД.Организация) И значениеЗаполнено(ПараметрыЭД.Контрагент)тогда
	    	ИдентификаторОператора = "2BE";
	    	ИдентификаторОрганизации= ПараметрыЭД.Организация.ИНН+"_"+ПараметрыЭД.Организация.КПП;
	    	ИдентификаторКонтрагента= ПараметрыЭД.Контрагент.ИНН+"_"+ПараметрыЭД.Контрагент.КПП;
	    	СпособОбменаЭД= Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;     
	  
			Набор = РегистрыСведений.УчетныеЗаписиЭДО.СоздатьНаборЗаписей();
			Набор.Отбор.ИдентификаторЭДО.Установить(ИдентификаторОрганизации);
			Набор.Прочитать();
			Если ЗначениеЗаполнено(Набор) Тогда
				Для Каждого Запись из Набор Цикл // поддержка совместимости с обработками версии 36 и ниже
					Если Запись.СпособОбменаЭД <> СпособОбменаЭД Тогда
						Запись.СпособОбменаЭД = СпособОбменаЭД;
						Набор.Записать();
					КонецЕсли;
				КонецЦикла;
			Иначе
				Запись = Набор.Добавить();
				Запись.ИдентификаторЭДО = ИдентификаторОрганизации;
				Запись.Организация = ПараметрыЭД.Организация;
				Запись.СпособОбменаЭД = СпособОбменаЭД;
				Запись.ОператорЭДО                    = ИдентификаторОператора;
				Запись.НаименованиеУчетнойЗаписи      = "СБИС";
				Запись.ПринятыУсловияИспользования    = "Истина";
				Набор.Записать();
			Конецесли;
			
			ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ДокСсылка);
			Если СоставПакета.Направление =  "Исходящий" Или СоставПакета.Направление= Перечисления.НаправленияЭДО.Исходящий Тогда
				ЭлектронныйДокумент = "ЭлектронныйДокументИсходящийЭДО";
			Иначе
				ЭлектронныйДокумент = "ЭлектронныйДокументВходящийЭДО";
			КонецЕсли;
			ЭлектронныйДокумент = СоздатьЭлектронныйДокумент(ДокСсылка, ЭлектронныйДокумент, СоставПакета, СпособОбменаЭД,
					ПараметрыЭД, ИдентификаторОрганизации, ИдентификаторКонтрагента, XMLДокумента, СтруктураФайла);
			
			УстановитьСостояние(СоставПакета.Состояние.Название, ПараметрыЭД, ДокСсылка, ЭлектронныйДокумент);
		конецесли;
	Иначе 
		сообщить("Не удалось заполнить параметры электронного документа. Не поддерживается электронный обмен документами "+ТипЗнч(ДокСсылка));
	КонецЕсли;
конецфункции

&НаСервереБезКонтекста
Функция СоздатьЭлектронныйДокумент(ДокСсылка, ЭлектронныйДокументНаправление, СоставПакета, 
				СпособОбменаЭД, ПараметрыЭД, ИдентификаторОрганизации, ИдентификаторКонтрагента, 
				XMLДокумента, СтруктураФайла)
	НаборОбъектовУчета = Новый Массив;
	НаборОбъектовУчета.Добавить(ДокСсылка);
	СсылкаНаВладельца = неопределено;
	
	Если ЗначениеЗаполнено(XMLДокумента) Тогда
		Поток = Новый ПотокВПамяти;
		ТекстXMLДокумента = Новый ТекстовыйДокумент;
		ТекстXMLДокумента.УстановитьТекст(XMLДокумента);
		СтрКодировка = Нрег(ТекстXMLДокумента.ПолучитьСтроку(1));
		Кодировка = ?(СтрНайти(СтрКодировка,"windows"), КодировкаТекста.ANSI, КодировкаТекста.UTF8);
		ЗаписьТекста = Новый ЗаписьТекста(Поток, Кодировка);
		ЗаписьТекста.Записать(XMLДокумента);
		ЗаписьТекста.Закрыть();
		
		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ИмяФайла = "Сбис.xml";
		ОписаниеФайла.ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные(); //ПолучитьИзВременногоХранилища(ПараметрыФайла.АдресХранилища);
				
		ПараметрыСоздания = Новый Структура("НомерДокумента,ДатаДокумента, СуммаДокумента,ВидДокумента",
							"",Дата(1,1,1),0, неопределено);
		ПараметрыСоздания.Вставить("ИдентификаторПакета", СоставПакета.Идентификатор);
		ПараметрыСоздания.Вставить("Организация", ПараметрыЭД.Организация);
		ПараметрыСоздания.Вставить("Контрагент", ПараметрыЭД.Контрагент);
		ПараметрыСоздания.Вставить("Договор", ПараметрыЭД.ДоговорКонтрагента);
		ПараметрыСоздания.Вставить("ОбъектыУчета", НаборОбъектовУчета);
		
		Попытка
			Результат = ЭлектронныеДокументыЭДО.СоздатьДокументПоФайлу(ПараметрыСоздания, ОписаниеФайла);
			Если Результат.Успех Тогда
				СсылкаНаВладельца = Результат.ЭлектронныйДокумент;
			КонецЕсли;
		Исключение
			// Вероятно неподдерживаемый 1C формат xml" - пока не будем сообщать
		КонецПопытки;
	КонецЕсли;
	Если СсылкаНаВладельца = неопределено Тогда
		// нет сформированого пакета или неудалось создать по файлу
		Название = ?(СоставПакета.свойство("Название"),"СБИС "+СоставПакета.Название,"СБИС электронный документ");
		запрос=новый запрос("ВЫБРАТЬ
		                    |	ЭД.Ссылка КАК Ссылка
		                    |ИЗ
		                    |	Документ."+ЭлектронныйДокументНаправление+".ИдентификаторыОснований КАК ЭД
		                    |ГДЕ
		                    |	ЭД.Ссылка.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
							|	И ЭД.ИдентификаторСвязи = &ИдентификаторСвязи");
		запрос.Параметры.Вставить("ИдентификаторДокументооборота", СоставПакета.Идентификатор);
		ИдентификаторСвязи = Строка(ДокСсылка.УникальныйИдентификатор());
		запрос.Параметры.Вставить("ИдентификаторСвязи", ИдентификаторСвязи);
		результат=запрос.Выполнить().Выбрать();
		если результат.Следующий() тогда
			СсылкаНаВладельца =  результат.ссылка;
		иначе
			НовыйЭлектронныйДокумент = Документы[ЭлектронныйДокументНаправление].СоздатьДокумент();
			НовыйЭлектронныйДокумент.Организация			= 	ПараметрыЭД.Организация;
			НовыйЭлектронныйДокумент.Контрагент 			=	ПараметрыЭД.Контрагент;
			НовыйЭлектронныйДокумент.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
			НовыйЭлектронныйДокумент.ИдентификаторОрганизации = ИдентификаторОрганизации;
			НовыйЭлектронныйДокумент.СпособОбмена           =	СпособОбменаЭД;
			НовыйЭлектронныйДокумент.ВидДокумента 			=	ПараметрыЭД.Тип;
			НовыйЭлектронныйДокумент.Дата= ?(СоставПакета.свойство("Дата"),СоставПакета.Дата,ДокСсылка.Дата); //- дата электронного документа в информационной базе отправителя.
			Если Не значениеЗаполнено(НовыйЭлектронныйДокумент.Дата) Тогда
				НовыйЭлектронныйДокумент.Дата = ТекущаяДата();
			КонецЕсли;	
			НовыйЭлектронныйДокумент.ДатаДокумента			=	НовыйЭлектронныйДокумент.Дата;
			НовыйЭлектронныйДокумент.НомерДокумента = ?(СоставПакета.свойство("Номер"),СоставПакета.Номер,ДокСсылка.Номер); // номер электронного документа в информационной базе отправителя.
			НовыйЭлектронныйДокумент.ИдентификаторДокументооборота	= СоставПакета.Идентификатор;
			НовыйЭлектронныйДокумент.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный;
			НовыйЭлектронныйДокумент.Комментарий= Название + ?(СоставПакета.свойство("Примечание")," "+СоставПакета.Примечание,"");
			Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Попытка
				ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД(ПараметрыЭД.Контрагент, ПараметрыЭД.Организация, неопределено, Ответственный);
			Исключение
			КонецПопытки;	
			НовыйЭлектронныйДокумент.Ответственный= Ответственный; // хорошо бы взять из СоставПакета.Ответственный
			Если СоставПакета.Состояние.свойство("Примечание") тогда
				НовыйЭлектронныйДокумент.ПричинаОстановки = СоставПакета.Состояние.Примечание;
			КонецЕсли;

			НоваяСтрока = НовыйЭлектронныйДокумент.ИдентификаторыОснований.Добавить();
			НоваяСтрока.ИдентификаторСвязи = ИдентификаторСвязи;
			НоваяСтрока.ИдентификаторДокументооборота = НовыйЭлектронныйДокумент.ИдентификаторДокументооборота;
		
			НовыйЭлектронныйДокумент.Записать();
			СсылкаНаВладельца = НовыйЭлектронныйДокумент.ссылка;
		Конецесли;
		ИнтеграцияЭДО.УстановитьАктуальныйЭлектронныйДокумент(НаборОбъектовУчета, СсылкаНаВладельца);
	КонецЕсли;
	
	// Для корректной проверки поступившей маркируемой продукции при включенном дублировании статусов 
	// необходимо создать документ СообщениеЭДО и поместить файл в СообщениеЭДОПрисоединенныеФайлы
	// При проверке маркировки из функции ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыПоДаннымУПД
	// вызывается функция ЭлектронныеДокументыЭДО.ДанныеЭлектронногоДокумента, в которой требуются эти данные.
	Если ЭлектронныйДокументНаправление = "ЭлектронныйДокументВходящийЭДО" Тогда
		Попытка
			ТипыЭлементовРегламента = Новый Массив;
			ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
			ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ЭлектронныйДокумент", СсылкаНаВладельца);
			Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СообщениеЭДО.ОсновнойФайл,
			|	СообщениеЭДО.ТипЭлементаРегламента,
			|	СообщениеЭДО.Направление
			|ИЗ
			|	Документ.СообщениеЭДО КАК СообщениеЭДО
			|ГДЕ
			|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
			|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 0 Тогда
				СообщениеОбъект = Документы.СообщениеЭДО.СоздатьДокумент();
				СообщениеОбъект.Дата = ТекущаяДатаСеанса();
				СообщениеОбъект.ЭлектронныйДокумент = СсылкаНаВладельца;
				СообщениеОбъект.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
				СообщениеОбъект.Направление = Перечисления.НаправленияЭДО.Входящий;
				СообщениеОбъект.ВидСообщения = ПараметрыЭД.Тип;
				
				СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Получен;
                			
				СообщениеОбъект.ДатаИзмененияСтатуса = СообщениеОбъект.Дата;
				СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Подписание;
				
				СообщениеОбъект.ОсновнойФайл = Справочники.СообщениеЭДОПрисоединенныеФайлы.ПолучитьСсылку();
				СообщениеОбъект.Записать();	 
				
				ПараметрыДобавленияФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
				ПараметрыДобавленияФайла.ВладелецФайлов = СообщениеОбъект.Ссылка;
				ПараметрыДобавленияФайла.Служебный = Ложь;
				ПараметрыДобавленияФайла.Автор = Пользователи.ТекущийПользователь();
				
				ПараметрыДобавленияФайла.ИмяБезРасширения = СтруктураФайла.Файл.Имя;
				ПараметрыДобавленияФайла.РасширениеБезТочки = "xml";
				ПараметрыДобавленияФайла.Вставить("ПолноеИмяФайла", СтруктураФайла.Файл.Имя+".xml");
				
				АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ОписаниеФайла.ДвоичныеДанные);
				
				ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыДобавленияФайла, АдресДвоичныхДанных,,,СообщениеОбъект.ОсновнойФайл);
				
				УдалитьИзВременногоХранилища(АдресДвоичныхДанных);
			КонецЕсли;
		Исключение  
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	// << alo Загрузка маркировки
	Если ЗначениеЗаполнено(СтруктураФайла) И СтруктураФайла.Свойство("Файл") 
			И СтруктураФайла.Файл.Свойство("Документ") И СтруктураФайла.Файл.Документ.Свойство("ТаблДок")
			И СтруктураФайла.Файл.Документ.ТаблДок.Свойство("СтрТабл") Тогда
		Для Каждого СтрокаТовара Из СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл Цикл
			Если СтрокаТовара.Свойство("Номенклатура") И СтрокаТовара.Свойство("Название") Тогда
				ЕдИзм = ?(СтрокаТовара.Свойство("ЕдИзм"),СтрокаТовара.ЕдИзм,"");
				Идентификатор = ВРег(СтрЗаменить(СтрокаТовара.Название+"##"+ЕдИзм," ", ""));
				ХарактеристикаНоменклатуры = ?(СтрокаТовара.Свойство("ХарактеристикиНоменклатуры"),СтрокаТовара.ХарактеристикиНоменклатуры,"");
				ОписаниеНоменклатурыИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(
											СтрокаТовара.Номенклатура, ХарактеристикаНоменклатуры);
				Партнеры=Ложь;
				Попытка
					Партнеры= (Метаданные.ОпределяемыеТипы.ВладелецНоменклатурыБЭД.тип.типы().Найти(Тип("СправочникСсылка.Партнеры"))<> неопределено);
				Исключение
				КонецПопытки;
				ОписаниеНоменклатурыКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(
													?(Партнеры, ПараметрыЭД.Контрагент.Партнер, ПараметрыЭД.Контрагент), Идентификатор);
				ОписаниеНоменклатурыКонтрагента.Наименование =                       СтрокаТовара.Название;
				//ОписаниеНоменклатурыКонтрагента.ИдентификаторНоменклатурыСервиса =   Идентификатор;
				ОписаниеНоменклатурыКонтрагента.ИдентификаторХарактеристикиСервиса = ?(СтрокаТовара.Свойство("Характеристика"),СтрокаТовара.Характеристика,"");
				ОписаниеНоменклатурыКонтрагента.ЕдиницаИзмерения =                   ЕдИзм;
				
				СопоставлениеНоменклатурыКонтрагентов.УстановитьСоответствиеНоменклатуры(ОписаниеНоменклатурыКонтрагента, ОписаниеНоменклатурыИБ);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	возврат СсылкаНаВладельца;
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьСостояние(СтатусЭД, ПараметрыЭД, ДокСсылка, ЭлектронныйДокумент)
	СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.НеСформирован;
	Попытка
		Если Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 Тогда     // Выгружен или загружен на сервер
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение;
		ИначеЕсли Найти(нрег(СтатусЭД), "отослано приглашение")=1 Тогда      // Отправлено приглашение
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение;
		ИначеЕсли Найти(нрег(СтатусЭД), "отправлен")=1 Тогда     // Отправлен
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении;
		ИначеЕсли Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0 Тогда     // Ошибки при отправке или при доставке
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи;
		ИначеЕсли Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1 Тогда                        // Доставлен
			Если ПараметрыЭД.Тип = перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Или 
					ПараметрыЭД.Тип = перечисления.ТипыДокументовЭДО.СчетФактура Тогда
				СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ОбменЗавершен;
			иначе
				СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение;
			конецесли;
		ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 Тогда	// Отклонен
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением;
		ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 Тогда	// Утвержден
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ОбменЗавершен;
		ИначеЕсли Найти(нрег(СтатусЭД), "в обработке")=1 Тогда                        
			Если ПараметрыЭД.Направление = перечисления.НаправленияЭДО.Исходящий Тогда
				СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка;
			Иначе
				СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение;
			КонецЕсли;
		ИначеЕсли Найти(нрег(СтатусЭД), "удален")=1 Тогда	// Удален контрагентом
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.Аннулирован;
		ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда	// Удален мной
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно;
		КонецЕсли;
	исключение // Вероятно Какое- то из перечислений оказалось не определено
		СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Обновление_ЗаписатьСостояниеДокумент(ЭлектронныйДокумент, СостояниеДокументовЭДО, СтатусЭД, ЭлектронныйДокумент.Дата, "ЭДО СБИС");
	КонецЕсли;
	ИнтеграцияЭДО.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(ЭлектронныйДокумент, ДокСсылка);
	Описание = ИнтеграцияЭДО.ОписаниеОснованияЭлектронногоДокумента(ДокСсылка);
	ЗаписатьОснованиеНовогоЭлектронногоДокумента(ДокСсылка,Описание);
КонецФункции

&НаСервереБезКонтекста
Процедура Обновление_ЗаписатьСостояниеДокумент(ЭлектронныйДокумент, Состояние, СостояниеДополнение, ДатаИзменения, Комментарий)
	НаборЗаписей = РегистрыСведений.СостоянияДокументовЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	Запись.Состояние = Состояние;
	Запись.СостояниеДополнение = СостояниеДополнение;
	Запись.ДатаИзменения = ДатаИзменения;
	Запись.Комментарий = Комментарий;
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
КонецПроцедуры

// Сохраняет описание основания нового электронного документа.
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Описание - см. НовоеОписаниеОснованияЭлектронногоДокумента
//
&НаСервереБезКонтекста
Процедура ЗаписатьОснованиеНовогоЭлектронногоДокумента(ОбъектУчета, Знач Описание)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	НачатьТранзакцию();
	Попытка
		
		Набор = РегистрыСведений.СостоянияПоОбъектамУчетаЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.СсылкаНаОбъект.Установить(ОбъектУчета);
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		Набор.Прочитать();
		
		Если Не ЗначениеЗаполнено(Набор) Тогда
			Запись = Набор.Добавить();
			Запись.СсылкаНаОбъект = ОбъектУчета;
		КонецЕсли;
		
		Для каждого Запись Из Набор Цикл
			
			Запись.Вид = Описание.Вид;
			Запись.Дата =  ?(значениеЗаполнено(Описание.Дата),Описание.Дата,ТекущаяДата()); 
			Запись.Номер = Описание.Номер;
			Запись.Организация = Описание.Организация;
			Запись.Контрагент = Описание.Контрагент;
			Запись.СуммаДокумента = Описание.СуммаДокумента;
			
		КонецЦикла;
		
		Набор.Записать();
		
		СостояниеОбъектаУчета = ИнтеграцияЭДО.РассчитатьСостояниеОбъектаУчета(ОбъектУчета);

		Состояние = СостояниеОбъектаУчета.Состояние;
		ПредставлениеСостояния = СостояниеОбъектаУчета.ПредставлениеСостояния;

		УстановитьСостояниеЭлектронныхДокументовОбъектаУчета(ОбъектУчета, Состояние, ПредставлениеСостояния);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru = 'Запись описания основания нового электронного документа'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;
	
КонецПроцедуры

// Сохраняет информацию о состоянии актуальных электронных документов объекта учета.
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО - состояние электронного документа.
//  ПредставлениеСостояния - Строка - представление состояния электронных документов.
//
&НаСервереБезКонтекста
Процедура УстановитьСостояниеЭлектронныхДокументовОбъектаУчета(Знач ОбъектУчета, Знач Состояние, Знач ПредставлениеСостояния)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Набор = РегистрыСведений.СостоянияПоОбъектамУчетаЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.СсылкаНаОбъект.Установить(ОбъектУчета);
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		
		Набор.Прочитать();
		
		Если Не ЗначениеЗаполнено(Набор) Тогда
			Запись = Набор.Добавить();
			Запись.СсылкаНаОбъект = ОбъектУчета;
		КонецЕсли;
		
		Для каждого Запись Из Набор Цикл
			Запись.СостояниеЭДО = Состояние;
			Запись.ПредставлениеСостояния = ПредставлениеСостояния;
		КонецЦикла;
		
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru = 'Запись информации о состоянии актуальных электронных документов объекта учета'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры
