
&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Если Кэш = Неопределено Тогда
		Возврат ПолучитьФорму(СбисПутьКФормамОбработки() + "МодульОбъектаКлиент",,ЭтаФорма);
	КонецЕсли;
	Возврат Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеПакетаДляОшибки(Строка) Экспорт
	// Функция возвращает представление пакета. Используется при выводе ошибки.
	Попытка
		ПредставлениеПакета = "Пакет документов: " + СокрЛП(Строка.Значение.Вложения) + "; ";
	Исключение
		ПредставлениеПакета = "Пакет документов: " + Строка.Значение.СоставПакета[0].Значение.Название + "; ";
	КонецПопытки;
	Возврат ПредставлениеПакета;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////

////////////////////// Управляемое приложение/////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ЗаписейНаСтраницеПриИзменении(Элемент)
	ПутьКДаннымФормы = Сред(Элемент.Имя, Найти(Элемент.Имя, "_")+1);
	МодульОбъектаКлиент().ИзменитьПараметрСбис(ПутьКДаннымФормы, ЭтаФорма[ПутьКДаннымФормы]);
	ФильтрСтраница = 1;
	ОбновитьКонтент();
КонецПроцедуры
Процедура ОбновитьПоляФормы(Знач СтруктураДляОбновленияФормы)
	Если ТипЗнч(СтруктураДляОбновленияФормы) = Тип("Структура") Тогда
		Для Каждого Элемент Из СтруктураДляОбновленияФормы Цикл
			Если ТипЗнч(ЭтаФорма.РеквизитФормыВЗначение(Элемент.Ключ)) = Тип("ТаблицаЗначений") Тогда
				ТаблицаДанных = МассивСтруктурВТаблицуЗначений(Элемент.Значение);
				ЭтаФорма[Элемент.Ключ].Загрузить(ТаблицаДанных);
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрУстановить(Команда)
	сбисПослеУстановкиФильтра(Истина, Неопределено);
КонецПроцедуры

#Область include_core2_vo2_ОбщиеФункции_ФормаГлавноеОкно_Аккордеон
#КонецОбласти

#Область include_core2_vo3_Аккордеон
#КонецОбласти

&НаСервереБезКонтекста
Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	Результат = Новый ТаблицаЗначений;
	Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
		Возврат Результат;
	Иначе 
		Образец = МассивСтруктур[0];
		Для Каждого  Стр из Образец Цикл
			Результат.Колонки.Добавить(Стр.Ключ );
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из МассивСтруктур Цикл
		СтрТ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
	КонецЦикла;
	Возврат Результат;
КонецФункции

//Панель фильра
&НаКлиенте
Процедура ФильтрОткрытьПанельУстановки(Элемент)

	МодульОбработка		= МодульОбъектаКлиент();
	НазваниеРаздела 	= МодульОбработка.СтруктураРазделаГО_Получить(Кэш.Текущий, "Название");
	ТипРаздела			= МодульОбработка.СтруктураРазделаГО_Получить(Кэш.Текущий, "Тип");
	ОбработчикФильтра	= МодульОбработка.НовыйСбисОписаниеОповещения("сбисПослеУстановкиФильтра", ЭтаФорма);
	
	ПараметрыПолученияФорм		= Новый Структура("ОбработкаОбъект, КэшироватьФорму", МодульОбработка.ГлобальныйКэш_Получить("ВнешниеФункции"), Ложь);
	ФормаФильтраРазделаПольз	= МодульОбработка.ПолучитьФормуОбработки("Фильтр_Раздел_" + НазваниеРаздела + "_" + ТипРаздела, ПараметрыПолученияФорм);
	Если ФормаФильтраРазделаПольз = Ложь Тогда
		
		ФормаФильтраРазделаПольз = МодульОбработка.ПолучитьФормуОбработки("Фильтр_Раздел_" + НазваниеРаздела + "_Шаблон", ПараметрыПолученияФорм);
		
	КонецЕсли;
	
	Если Не ФормаФильтраРазделаПольз = Ложь Тогда 
		
		ФормаФильтраРазделаПольз.ОписаниеОповещенияОЗакрытии = ОбработчикФильтра;
		ФормаФильтраРазделаПольз.Открыть();
		Возврат;
		
	КонецЕсли;

	ПараметрыПолученияФорм	= Новый Структура("КэшироватьФорму",	Ложь);
	ПараметрыОткрытияФормы	= Новый Структура("Источник",			ЭтаФорма);

	Если НазваниеРаздела = "Справочники" Тогда
		
		ПараметрыОткрытияФормы.Вставить("ВариантФильтра", "ФормаГлавноеОкноНоменклатура");
		
	КонецЕсли;
	ФормаФильтра = МодульОбъектаКлиент().ПолучитьФормуОбработки("ФормаУстановкиФильтра"); 
	ФормаФильтра.ОписаниеОповещенияОЗакрытии = ОбработчикФильтра;
	ФормаФильтра.ПоказатьПоверх(ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееЗначениеФильтраНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ФильтрОткрытьПанельУстановки("");
КонецПроцедуры
&НаКлиенте
Процедура ФильтрОчистить(Элемент) Экспорт
	Кэш.Текущий.Форма.ФильтрОчистить(Кэш);
	ФильтрОбновитьПанель();	
	сбисСохранитьФильтрРаздела(Кэш);
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура ФильтрОбновитьПанель() Экспорт
	ТекущееЗначениеФильтра="";
	Если ФильтрПериод="За период" Тогда
		ТекущееЗначениеФильтра = ФильтрПериод+" "+ФильтрПериодПрописью(ФильтрДатаНач, ФильтрДатаКнц);	//Сюда код который делает строку как онлайне
	ИначеЕсли ФильтрПериод="За весь период" Тогда
		ТекущееЗначениеФильтра = "";
	Иначе
		ТекущееЗначениеФильтра = ФильтрПериод;	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрКонтрагент) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрКонтрагент);	
	КонецЕсли;
	если ЗначениеЗаполнено(ФильтрТипыДокументов) И (кэш.текущий.типДок="Отправленные" или кэш.текущий.типДок="Полученные") тогда // Фильтр заполнен и в этом разделе будет действовать
		списокТипДок="";
		для каждого типДок из ФильтрТипыДокументов цикл 
			списокТипДок=списокТипДок+типДок.представление+",";
		конеццикла;
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + лев(списокТипДок,СтрДлина (списокТипДок)-1);	
	конецесли;
	Если ФильтрСостояние<>"Все документы" Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", "+ФильтрСостояние;	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОрганизация) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрОрганизация);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОтветственный) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрОтветственный);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрКонтрагентПодключен) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрКонтрагентПодключен);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрМаска) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрМаска);	
	КонецЕсли;	
	//Добавим дополнительные параметры фильтра для текущего раздела
	Если Не ЗначениеЗаполнено(Кэш.Текущий.Раздел) Тогда
		Возврат;
	КонецЕсли;
	НазваниеРаздела = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	ФормаДопФильтра = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок,"Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон", Кэш);
	Если ФормаДопФильтра<>ложь Тогда
		СписокДопЭлементов = ФормаДопФильтра.сбисСписокДопПараметровФильтра();
		Для Каждого Элемент Из СписокДопЭлементов Цикл
			Если Кэш.ПараметрыФильтра.Свойство(Элемент.Значение) и ЗначениеЗаполнено(Кэш.ПараметрыФильтра[Элемент.Значение]) Тогда
				ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(Кэш.ПараметрыФильтра[Элемент.Значение]);				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Лев(ТекущееЗначениеФильтра, 2) = ", " Тогда
		ТекущееЗначениеФильтра = Сред(ТекущееЗначениеФильтра,3);
	КонецЕсли;
	
	Если ТекущееЗначениеФильтра="" тогда
		Элементы.ПанельФильтра.ТекущаяСтраница = Элементы.ПанельФильтра.ПодчиненныеЭлементы["ФильтраНет"];		
	иначе
		Элементы.ПанельФильтра.ТекущаяСтраница = Элементы.ПанельФильтра.ПодчиненныеЭлементы["ФильтрЕсть"];		
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура сбисСохранитьФильтрРаздела(Кэш) Экспорт
	ТекущийФильтр = сбисСохранитьТекущийФильтр(Кэш);
	Если ЗначениеЗаполнено(Кэш.Текущий.Раздел) Тогда
		Кэш.Парам.ФильтрыПоРазделам.Вставить(Кэш.Разделы["р"+Кэш.Текущий.Раздел], ТекущийФильтр);
	КонецЕсли;
КонецПроцедуры
// Навигация
&НаКлиенте
Процедура НавигацияПерваяСтраница(Команда)
	ФильтрСтраница = 1;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура НавигацияПредыдущаяСтраница(Команда)
	ФильтрСтраница = ФильтрСтраница-1;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура НавигацияСледующаяСтраница(Команда)
	ФильтрСтраница = ФильтрСтраница+1;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура НавигацияПоследняяСтраница(Команда)
	ФильтрСтраница = 0;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура ОтметитьВсе()
	ОтметитьВсе = Не ОтметитьВсе;
	Для Каждого Строка Из ЭтаФорма[Кэш.ТаблДок.Имя] Цикл
		Строка.Отмечен = ОтметитьВсе;
	КонецЦикла;
КонецПроцедуры

// Утверждение/Отклонение
&НаКлиенте
Процедура КонтекстноеМенюПолученныеУтвердитьОтклонить(Команда)
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	фрм = сбисНайтиФормуФункции("сбисУтвердитьОтклонить","РаботаСДокументами1С","",Кэш);
	фрм.сбисУтвердитьОтклонить(Кэш,СписокОтмеченныхДокументов, Команда);
КонецПроцедуры
&НаКлиенте
Процедура УтвердитьВыделенные(Команда)
	КонтекстноеМенюПолученныеУтвердитьОтклонить("Утвердить");
КонецПроцедуры
&НаКлиенте
Процедура ОтклонитьВыделенные(Команда)
	КонтекстноеМенюПолученныеУтвердитьОтклонить("Отклонить");
КонецПроцедуры     

&НаКлиенте
Процедура АннулироватьВыделенные(Команда)
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	фрм = сбисНайтиФормуФункции("СбисАннулироватьЗаказОтправленный", "РаботаСДокументами1С", "", Кэш);
	фрм.СбисАннулироватьЗаказОтправленный(СписокОтмеченныхДокументов);
КонецПроцедуры

&НаКлиенте
Функция ОбновитьКонтент(АргументВходящие = Неопределено, ДопПараметры = Неопределено) Экспорт
	// Обновляет данные на главном окне	
	Если Кэш.ТаблДок = "" Тогда   // Если открыта сама обработка, а отправку делаем из карточки документа 1С, то ничего не обновляем
		Возврат "";
	КонецЕсли;
	//Получим имя и значение реквизита по которому будем искать текущую строку
	ЗначениеПоиска = Неопределено;
	Если ТипЗнч(Кэш.ТаблДок.ТекущиеДанные) <> Тип("Неопределено") Тогда
		Если Кэш.ТаблДок.Имя = "Таблица_РеестрДокументов" Тогда
			РеквизитПоиска = "Документ1С";
		Иначе
			РеквизитПоиска = "ИдСБИС";
		КонецЕсли;	
		Кэш.ТаблДок.ТекущиеДанные.Свойство(РеквизитПоиска, ЗначениеПоиска);
	КонецЕсли;
	
	СтруктураДляОбновленияФормы = Кэш.Текущий.Форма.ОбновитьКонтент(Кэш);
	ОбновитьПоляФормы(СтруктураДляОбновленияФормы);
	
	//Найдем строку в новой таблице по имени и значению реквизита
	Если ЗначениеПоиска <> Неопределено и ТипЗнч(СтруктураДляОбновленияФормы) = Тип("Структура") Тогда
		Для Каждого Элемент Из СтруктураДляОбновленияФормы Цикл
			ТаблПоиска = ЭтаФорма[Элемент.Ключ];
			ПараметрыОтбора = Новый Структура(РеквизитПоиска, ЗначениеПоиска);
			Строка = ТаблПоиска.НайтиСтроки(ПараметрыОтбора);
			//Берем первую строку из массива (Т.к. поиск по документу или по ИдСБИС, то строка единственная в таблице)
			Если Строка.Количество() <> 0 Тогда
				НомерСтроки = Строка[0].ПолучитьИдентификатор(); 
				Кэш.ТаблДок.ТекущаяСтрока = НомерСтроки;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура СохранитьПакет(Элемент) 
	// Сохраняет пакеты документов на диск (+ pdf файлы вложений)	
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	СписокПакетов = Новый массив;
	Для Каждого Элемент Из СписокОтмеченныхДокументов Цикл
		СписокПакетов.Добавить(Элемент.Значение.СоставПакета[0].Значение);
	КонецЦикла;
	Кэш.ОбщиеФункции.СохранитьПакетыНаДиск(Кэш, СписокПакетов);	
КонецПроцедуры
//&НаКлиенте
//Функция ДобавитьСбисДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
//	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
//	Для Каждого Элемент Из СписокДопЭлементов Цикл
//		Кэш.ПараметрыФильтра.Вставить(Элемент.Значение);
//	КонецЦикла;
//	
//КонецФункции

&НаКлиенте
Процедура ВерсияНажатие(Элемент, СтандартнаяОбработка)
	// Открывает хистори обработки.
	ФормаНовости = сбисПолучитьФорму("ФормаНовости",,,ЭтаФорма);
	ФормаНовости.Открыть();
	СтандартнаяОбработка = Ложь;
КонецПроцедуры  

&НаКлиенте
Процедура ВерсияИнтеграцииНажатие(Элемент, СтандартнаяОбработка)
	ЗапуститьПриложение("https://sbis.ru/help/integration/sdk");
КонецПроцедуры
 
Процедура сбисЗаполнитьСписокСправочника(Ини) Экспорт
	// Заполняет дерево значений по справочнику
	ИмяСправочника = СокрЛП(Сред(Ини.СправочникТип.Значение, Найти(Ини.СправочникТип.Значение, ".")+1));
	Если Ини.Свойство("ЗапросСпискаЭлементов") Тогда
		ТекстЗапроса = СокрЛП(Ини.ЗапросСпискаЭлементов.Значение);
		Запрос = Новый Запрос(Сред(ТекстЗапроса,2,СтрДлина(ТекстЗапроса)-2));
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ЗаписьСправочника.Ссылка,ЗаписьСправочника.Наименование,ЗаписьСправочника.Код, Ложь КАК Отмечен ИЗ Справочник."+ИмяСправочника+" КАК ЗаписьСправочника ГДЕ (НЕ(ЗаписьСправочника.ЭтоГруппа) и НЕ ЗаписьСправочника.ПометкаУдаления)ИТОГИ ПО ЗаписьСправочника.Ссылка ТОЛЬКО ИЕРАРХИЯ");
	КонецЕсли;
	Дерево = РеквизитФормыВЗначение("Таблица_РеестрСправочников"); // заполняем Дерево 
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Дерево, "Таблица_РеестрСправочников");
КонецПроцедуры

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	// Отмечает вложенные записи дерева значений при отметке группы
	ТекущиеДанные = Элементы.Таблица_РеестрСправочников.ТекущиеДанные;
	ПроставитьПометкиВниз(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыбранныеСтроки(СписокОтмеченных, Потомки)
	// Получает выбранные строки дерева значений
	Для каждого Потомок из Потомки Цикл
		ПотомкиПотомка = Потомок.ПолучитьЭлементы();
		Если ПотомкиПотомка.Количество()=0 Тогда
			Если Потомок.Отмечен Тогда
				СписокОтмеченных.Добавить(Потомок.Ссылка);
			КонецЕсли;
		Иначе
			ПолучитьВыбранныеСтроки(СписокОтмеченных,ПотомкиПотомка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеДерево(Команда)
	// Отмечает все записи в дереве значений
	ОтметитьВсе = Не ОтметитьВсе;
	Потомки = Таблица_РеестрСправочников.ПолучитьЭлементы();
	Для Каждого Потомок Из Потомки Цикл
		Потомок.Отмечен = ОтметитьВсе;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаписьСправочника(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// открывает карточку справочника
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

//Список клиентских форм формируется при подключении заплаток
&НаКлиенте
Процедура ОтправитьКорреспонденцию(Команда)
	фрм = сбисНайтиФормуФункции("ПоказатьФорму","ФормаОтправкиКорреспонденции","",Кэш);	
	фрм.ПоказатьФорму(Кэш);
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиНаСервере(имяТаблицы, Знач ВидимыеКолонки, Ини) экспорт  // alo СтатусГос
	// Создание ТаблицыЗначений с описанием колонок
	ЭлементТаблица = Элементы[имяТаблицы];
		
	МассивРеквизитовФормы = Новый Массив;
	Для Каждого Колонка Из ВидимыеКолонки Цикл
		Колонка.Элемент = ЭлементТаблица.ПодчиненныеЭлементы.Найти(имяТаблицы+Колонка.Имя);
		если ини.Свойство("Реестр1С_"+Колонка.Имя) Тогда
			Колонка.Ини = ини["Реестр1С_"+Колонка.Имя];
		КонецЕсли;
		Если Колонка.Элемент = Неопределено Тогда
			ОписаниеТипа = Неопределено;
			Если Колонка.Ини.Свойство("Тип") Тогда
				Если Колонка.Ини.Тип = "Строка" Тогда
		 			КвалификаторыСтроки = Новый КвалификаторыСтроки;
	    			ОписаниеТипа = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
				Иначе
	    			ОписаниеТипа = Новый ОписаниеТипов(Колонка.Ини.Тип);	// например "СправочникСсылка.Сотрудники"
	 			КонецЕсли;
	 		КонецЕсли;
			Если ОписаниеТипа <> Неопределено Тогда
				МассивРеквизитовФормы.Добавить(Новый РеквизитФормы(Колонка.Имя, ОписаниеТипа, имяТаблицы));
			Иначе
				Сообщить("Необходимо описание типа поля "+Колонка.Имя);
			Конецесли;
		Конецесли;
    КонецЦикла;
    ИзменитьРеквизиты(МассивРеквизитовФормы);	    // Добавление в реквизитов колонок ТаблицыЗначений
		
	индекс = 0;
	Для Каждого Колонка Из ВидимыеКолонки Цикл
		Если Колонка.Элемент = Неопределено Тогда
			СледующийЭлемент = Неопределено;
			Если индекс+1 < ВидимыеКолонки.Количество() Тогда
				СледующийЭлемент = ВидимыеКолонки[индекс+1].Элемент;
			КонецЕсли;
			Колонка.Элемент = Элементы.Вставить(имяТаблицы+Колонка.Имя, Тип("ПолеФормы"),ЭлементТаблица, СледующийЭлемент);
			Колонка.Элемент.Ширина = 10;//Колонка.Элемент.ШиринаЭлемента = 10;
		КонецЕсли;
		Колонка.Элемент.Видимость = Истина;
		Если Колонка.Ини.Свойство("Ширина") Тогда
			Попытка	// у существующих поле переключателей и картинок такого свойства нет
				Колонка.Элемент.Ширина = Колонка.Ини.Ширина;
			Исключение;
			КонецПопытки
		КонецЕсли;
		Если Колонка.Ини.Свойство("Заголовок") Тогда
			Колонка.Элемент.Заголовок = Колонка.Ини.Заголовок;
		КонецЕсли;
		Если Колонка.Ини.Свойство("Значение") И не ЗначениеЗаполнено(Колонка.Элемент.ПутьКДанным) Тогда
			Колонка.Элемент.ПутьКДанным = имяТаблицы+"."+Колонка.Ини.Значение;
		КонецЕсли;
		индекс = индекс +1;
	КонецЦикла;	
КонецПроцедуры

//Процедура управляет включением/отключением вывода логов
&НаКлиенте
Процедура сбисПереключитьОтладку()
	Если РежимОтладки Тогда
		Кэш.Интеграция.ВключитьОтладку(Кэш, КаталогОтладки);
	Иначе
		Кэш.Интеграция.ОтключитьОтладку(Кэш);
	КонецЕсли;
	
	Кэш.Парам.РежимОтладки	= РежимОтладки;
	Кэш.Парам.КаталогОтладки= КаталогОтладки;
	сбисЭлементФормы(ЭтаФорма, "КаталогОтладки").Видимость = РежимОтладки;
	//+++ МАИ 09.09.2021 Переопределяем сервер обновлений, если пользователь в режиме отладки указал другой
	сбисЭлементФормы(ЭтаФорма, "АдресСервисаОбновлений").Видимость = РежимОтладки;
	Если НЕ РежимОтладки ИЛИ АдресСервисаОбновлений = "" Тогда
		АдресСервисаОбновлений = "update.sbis.ru";
		Кэш.СБИС.ПараметрыИнтеграции.Вставить("АдресСервисаОбновлений", АдресСервисаОбновлений);
	КонецЕсли;
	//--- МАИ 09.09.2021
КонецПроцедуры

//Функция складывает в структуру текущие значения фильтра для последующего их восстановления	
&НаКлиенте
Функция сбисВосстановитьФильтр(Кэш, СтруктураФильта) Экспорт
	ФильтрПериод = СтруктураФильта.ФильтрПериод;
	// если изменилась текущая дата, надо обновить период
	Если(ФильтрПериод="За сегодня") Тогда
		ФильтрДатаНач = ТекущаяДата();
		ФильтрДатаКнц = ТекущаяДата();
	ИначеЕсли(ФильтрПериод = "За последний месяц") Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,-1);
	ИначеЕсли(ФильтрПериод = "За последние полгода") Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,-6);
	ИначеЕсли(ФильтрПериод = "За последний год") Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,-12);
	Иначе
		ФильтрДатаНач = СтруктураФильта.ФильтрДатаНач;
		ФильтрДатаКнц = СтруктураФильта.ФильтрДатаКнц;
	КонецЕсли;
	ФильтрСостояние = СтруктураФильта.ФильтрСостояние;
	ФильтрКонтрагент = СтруктураФильта.ФильтрКонтрагент;
	ФильтрКонтрагентПодключен = СтруктураФильта.ФильтрКонтрагентПодключен;
	ФильтрКонтрагентСФилиалами = ?(СтруктураФильта.Свойство("ФильтрКонтрагентСФилиалами"), СтруктураФильта.ФильтрКонтрагентСФилиалами, Ложь);
	ФильтрОрганизация = СтруктураФильта.ФильтрОрганизация;
	ФильтрСтраница = СтруктураФильта.ФильтрСтраница;
	ФильтрОтветственный = СтруктураФильта.ФильтрОтветственный;
	ФильтрТипыДокументов = СтруктураФильта.ФильтрТипыДокументов;
	ФильтрМаска = СтруктураФильта.ФильтрМаска;
	
	//Заполним дополнительные параметры фильтра
	Если СтруктураФильта.Свойство("ПараметрыФильтра") Тогда
		Для Каждого Элемент Из СтруктураФильта.ПараметрыФильтра Цикл
			Кэш.ПараметрыФильтра.Вставить(Элемент.Ключ,Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ФильтрыПоРазделам = Настройки.Получить("ФильтрыПоРазделам");
	НастройкиКриптографии = Настройки.Получить("НастройкиКриптографии");
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПереключенияАккаунта();
КонецПроцедуры

&НаКлиенте
Функция СбисПутьКФормамОбработки() Экспорт
	Возврат Сред(ЭтаФорма.ИмяФормы, 1, СтрДлина(ЭтаФорма.ИмяФормы) - 16);
КонецФункции

#Область include_core2_vo2_Печать_Команда
#КонецОбласти

 #Область include_core_base_ГлавноеОкно_ПриОткрытии
#КонецОбласти

#Область include_core_base_ГлавноеОкно_Аккордеон
#КонецОбласти

#Область include_core_base_ГлавноеОкно_ПоказатьШаблон
#КонецОбласти

#Область include_core_base_ГлавноеОкно_ПлоскийСписок
#КонецОбласти

#Область include_core_base_ГлавноеОкно_ИерархическийСписок
#КонецОбласти

#Область include_core_base_ГлавноеОкно_ПанельОпераций
#КонецОбласти

#Область include_core_base_ГлавноеОкно_Фильтр
#КонецОбласти

#Область include_core_base_ВстраиваниеВФормы_КомандаПоиск
#КонецОбласти

#Область include_core_base_Настройки_ЗаписатьНастройки
#КонецОбласти

#Область include_core_base_ГлавноеОкно_ОткрывалкаФорм
#КонецОбласти

#Область include_core_base_Helpers_FormGetters
#КонецОбласти

#Область include_core_base_ОсобенностиПлатформы_РаботаСЭлементамиФормы
#КонецОбласти

#Область include_core_base_ФоновыеЗадания_МодульФоновогоЗаданияСерверСКлиента
#КонецОбласти

#Область include_core_base_ФоновыеЗадания_МодульФоновогоЗаданияКлиент
#КонецОбласти

#Область include_core_base_ГлавноеОкно_ОсобенностиПриложения
#КонецОбласти

#Область include_core_base_ПроверкаВерсии_ПолучитьСтатусВерсииНаФорме
#КонецОбласти

#Область include_core_base_ПроверкаВерсии_НаФормеОбновлениеОбработки
#КонецОбласти

#Область include_core_base_Helpers_Картинки
#КонецОбласти

#Область include_core_base_Helpers_ПолучитьПрямуюСсылку
#КонецОбласти

#Область include_core2_vo2_ОбщиеФункции_ФормаГлавноеОкно_ЗаполнитьКонтекстВО3
#КонецОбласти

