
&НаСервере
Функция МодульОбъектаСервер()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Функция МодульОбъектаКлиент() Экспорт
	Если Кэш = Неопределено Тогда
		Возврат ПолучитьФорму(СбисПутьКФормамОбработки() + "МодульОбъектаКлиент",,ЭтаФорма);
	КонецЕсли;
	Возврат Кэш.СБИС.МодульОбъектаКлиент;
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеПакетаДляОшибки(Строка) Экспорт
	// Функция возвращает представление пакета. Используется при выводе ошибки.
	Попытка
		ПредставлениеПакета = "Пакет документов: " + СокрЛП(Строка.Значение.Вложения) + "; ";
	Исключение
		ПредставлениеПакета = "Пакет документов: " + Строка.Значение.СоставПакета[0].Значение.Название + "; ";
	КонецПопытки;
	Возврат ПредставлениеПакета;
	
КонецФункции

&НаКлиенте
Процедура СопоставитьДокументы(Команда)
	// Процедура вызывает форму сопоставления документов	
	Обновить = Ложь;
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	Если СписокОтмеченныхДокументов.Количество()>0 Тогда
		фрм = сбисПолучитьФорму("ФормаСопоставитьСДокументами1С");
		Обновить = фрм.Показать(Кэш,СписокОтмеченныхДокументов);
		//закомментировано, т.к. теперь сопоставление идет по вложениям
		//ИначеЕсли СписокОтмеченныхДокументов.Количество()=1 Тогда	 
		//	фрм = сбисПолучитьФорму("ФормаСопоставитьСДокументом1С");
		//	Обновить = фрм.Показать(Кэш,СписокОтмеченныхДокументов);
	Иначе 
		Сообщить("Не выбран ни один документ");
	КонецЕсли;
	//Если Обновить=Истина Тогда
	//	ОбновитьКонтент();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументы(Команда)
	// Процедура запускает отправку документов по отмеченным записям	
	Если ОтметитьВсе = Истина и ЗаписейНаСтранице1С<>"все" и (ФильтрСтраница<>1 или ФильтрЕстьЕще) Тогда // отмечены все записи на странице и есть еще страницы
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "С текущей страницы");
		Кнопки.Добавить(2, "Все документы");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьВыбранныеДокументы",ЭтаФорма),"Отправить документы только с текущей страницы или все документы списка?", Кнопки);
	Иначе
		ОтправитьВыбранныеДокументы(1, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВыбранныеДокументы(Ответ, СбисДополнительныеПараметры) Экспорт
	// Процедура запускает отправку документов по отмеченным записям	
	Если Ответ = 2 Тогда
		ВсеДокументы = Истина;
		ИмяРеестра="";	Ини="";
		Если Кэш.Разделы.Продажа.Свойство(Кэш.Текущий.Имя,ИмяРеестра)=Ложь Тогда
			Возврат;
		КонецЕсли;
		Если Кэш.ини.Свойство(ИмяРеестра,Ини)=Ложь Тогда
			Возврат;
		ИначеЕсли Ини = Неопределено Тогда
			Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяРеестра);
		КонецЕсли;
		СтруктураДляОбновленияФормы = Кэш.ОбщиеФункции.сбисОбновитьРеестрДокументов1С(Ини, Кэш);
		СписокОтмеченныхДокументов = Новый СписокЗначений;
		СписокОтмеченныхДокументов.ЗагрузитьЗначения( СтруктураДляОбновленияФормы.Таблица_РеестрДокументов);
	Иначе
		СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	КонецЕсли;
	ВсеДокументы = Ложь;
	ИмяДокумента = Кэш.Текущий.ТипДок;
	фрм = сбисНайтиФормуФункции("ОтправитьДокументы","Документ_"+ИмяДокумента,"Документ_Шаблон", Кэш);
	фрм.ОтправитьДокументы(Кэш,СписокОтмеченныхДокументов);
КонецПроцедуры

&НаКлиенте
Процедура ПросуммироватьВыделенные(Кнопка)
	// Процедура считает суммы документов сбис и сопоставленных им документов 1С	
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	СуммыПоВложениям = Новый Структура;
	Суммы1С = Новый Структура;
	Если СписокОтмеченныхДокументов.Количество()>0 Тогда
		Для Каждого Строка Из СписокОтмеченныхДокументов Цикл
			СоставПакета = Строка.Значение.СоставПакета[0].Значение;
			Если СоставПакета.Свойство("Вложение") Тогда
				Для Каждого Вложение Из СоставПакета.Вложение Цикл
					Если Не Вложение.Свойство("Служебный") или Вложение.Служебный = "Нет" Тогда
						Если ЗначениеЗаполнено(Вложение.Тип) Тогда
							Если Не СуммыПоВложениям.Свойство(Вложение.Тип) Тогда
								Название = Лев(Вложение.Название, Найти(Вложение.Название,"№")-2);
								Если Не ЗначениеЗаполнено(Название) Тогда
									Название = Вложение.Тип;	
								КонецЕсли;
								СуммыПоВложениям.Вставить(Вложение.Тип, Новый Структура("Название,Сумма",Название,0));
							КонецЕсли;
							Попытка
								Сумма = Число(Вложение.Сумма);
							Исключение
								Сумма=0;
							КонецПопытки;
							СуммыПоВложениям[Вложение.Тип].Сумма = СуммыПоВложениям[Вложение.Тип].Сумма+Сумма;
							Если Вложение.Свойство("Документы1С") и Вложение.Документы1С.Количество()>0 Тогда
								ИниЗагрузки = Кэш.ОбщиеФункции.сбисИниЗагрузкиПоДокументу1С(Кэш, Вложение.Документы1С[0].Значение);
								ИмяРеквизитаСуммы = Кэш.ОбщиеФункции.сбисИмяРеквизитаСуммыДокумента1С(ИниЗагрузки);
								ЗаполнитьСуммыДокументов1С(Суммы1С, Вложение.Документы1С[0].Значение, ИмяРеквизитаСуммы);	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Сообщить("Не выбран ни один документ");
	КонецЕсли;
	ТекстСообщения = "Сумма документов СБИС:"+Символы.ПС;
	Для Каждого Элемент Из СуммыПоВложениям Цикл
		ТекстСообщения = ТекстСообщения + Элемент.Значение.Название+": "+Элемент.Значение.Сумма+Символы.ПС;
	КонецЦикла;
	ТекстСообщения = ТекстСообщения + "   "+Символы.ПС+"Сумма документов 1С:"+Символы.ПС;
	Для Каждого Элемент Из Суммы1С Цикл
		ТекстСообщения = ТекстСообщения + Элемент.Значение.Название+": "+Элемент.Значение.Сумма+Символы.ПС;
	КонецЦикла;
	Сообщить(ТекстСообщения);	
	//СуммаДокументовСБИС = 0;
	//СуммаДокументов1С   = 0;
	//СуммаДельта         = 0;
	//СписокДокументов = ТаблДокПолучитьВыбранныеСтроки();
	//Для Каждого СтрокаДокумента из СписокДокументов Цикл 
	//		СуммаДокументовСБИС = СуммаДокументовСБИС + СтрокаДокумента.Значение.Сумма; 
	//	Попытка
	//		СуммаДокументов1С   = СуммаДокументов1С+СтрокаДокумента.Значение.Документ1С.СуммаДокумента;
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;	
	//СуммаДельта = СуммаДокументовСБИС - СуммаДокументов1С;
	//СуммаДельта = ?(СуммаДельта<0,-СуммаДельта,СуммаДельта); 
	//Предупреждение("Сумма документов СБИС: "+строка(СуммаДокументовСБИС)+Символы.ПС+"Сумма документов 1С: "+строка(СуммаДокументов1С)+Символы.ПС+"Отклонение: "+строка(СуммаДельта));
КонецПроцедуры



//////////////////////////////////////////////////////////////////////////////////

////////////////////// Управляемое приложение/////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////

Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Аккордеон = Новый Структура();
КонецПроцедуры //ПриСозданииНаСервере()
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолучитьРеквизитОбъектаДокумента();
	ЭтаФорма.ПодключитьОбработчикОжидания("ПослеОткрытия",0.1,Истина);
КонецПроцедуры
&НаКлиенте
Процедура ЗаписейНаСтраницеПриИзменении(Элемент)
	ПутьКДаннымФормы = Сред(Элемент.Имя, Найти(Элемент.Имя, "_")+1);
	МодульОбъектаКлиент().ИзменитьПараметрСбис(ПутьКДаннымФормы, ЭтаФорма[ПутьКДаннымФормы]);
	ФильтрСтраница = 1;
	ОбновитьКонтент();
КонецПроцедуры
Процедура ОбновитьПоляФормы(Знач СтруктураДляОбновленияФормы)
	Если ТипЗнч(СтруктураДляОбновленияФормы) = Тип("Структура") Тогда
		Для Каждого Элемент Из СтруктураДляОбновленияФормы Цикл
			Если ТипЗнч(ЭтаФорма.РеквизитФормыВЗначение(Элемент.Ключ)) = Тип("ТаблицаЗначений") Тогда
				ТаблицаДанных = МассивСтруктурВТаблицуЗначений(Элемент.Значение);
				ЭтаФорма[Элемент.Ключ].Загрузить(ТаблицаДанных);
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрУстановить(Команда)
	сбисПослеУстановкиФильтра(Истина, Неопределено);
КонецПроцедуры

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_Аккордеон
#КонецОбласти

#Область include_core_vo3_Аккордеон
#КонецОбласти

&НаСервереБезКонтекста
Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	Результат = Новый ТаблицаЗначений;
	Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
		Возврат Результат;
	Иначе 
		Образец = МассивСтруктур[0];
		Для Каждого  Стр из Образец Цикл
			Результат.Колонки.Добавить(Стр.Ключ );
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из МассивСтруктур Цикл
		СтрТ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
	КонецЦикла;
	Возврат Результат;
КонецФункции
//Панель фильра
&НаКлиенте
Процедура ФильтрОткрытьПанельУстановки(Элемент)
	НазваниеРаздела = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	Если Кэш.Заплатки<>Ложь Тогда
		Если Кэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению("Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок)<>Неопределено Тогда
			ОткрытьФорму("ВнешняяОбработка.ВнешниеФункции_Клиент.Форма.Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок,,ЭтаФорма,,,,Новый ОписаниеОповещения("сбисПослеУстановкиФильтра",ЭтаФорма));
		ИначеЕсли Кэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению("Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон")<>Неопределено Тогда
			ОткрытьФорму("ВнешняяОбработка.ВнешниеФункции_Клиент.Форма.Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон",,ЭтаФорма,,,,Новый ОписаниеОповещения("сбисПослеУстановкиФильтра",ЭтаФорма));
		Иначе
			ФормаФильтра = сбисПолучитьФорму("ФормаУстановкиФильтра",,,ЭтаФорма);
			ФормаФильтра.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеУстановкиФильтра",ЭтаФорма);
			ФормаФильтра.Открыть();
		КонецЕсли;
	Иначе
		Если НазваниеРаздела = "Справочники" Тогда
			ФормаФильтра = сбисПолучитьФорму("ФормаУстановкиФильтраНоменклатуры",,,ЭтаФорма); 
		Иначе
			ФормаФильтра = сбисПолучитьФорму("ФормаУстановкиФильтра",,,ЭтаФорма); 
		КонецЕсли;
		ФормаФильтра.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеУстановкиФильтра",ЭтаФорма);
		ФормаФильтра.Открыть();
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ТекущееЗначениеФильтраНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ФильтрОткрытьПанельУстановки("");
КонецПроцедуры
&НаКлиенте
Процедура ФильтрОчистить(Элемент) Экспорт
	Кэш.Текущий.Форма.ФильтрОчистить(Кэш);
	ФильтрОбновитьПанель();	
	сбисСохранитьФильтрРаздела(Кэш);
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура ФильтрОбновитьПанель() Экспорт
	ТекущееЗначениеФильтра="";
	Если ФильтрПериод="За период" Тогда
		ТекущееЗначениеФильтра = ФильтрПериод+" "+ФильтрПериодПрописью(ФильтрДатаНач, ФильтрДатаКнц);	//Сюда код который делает строку как онлайне
	ИначеЕсли ФильтрПериод="За весь период" Тогда
		ТекущееЗначениеФильтра = "";
	Иначе
		ТекущееЗначениеФильтра = ФильтрПериод;	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрКонтрагент) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрКонтрагент);	
	КонецЕсли;
	если ЗначениеЗаполнено(ФильтрТипыДокументов) И (кэш.текущий.типДок="Отправленные" или кэш.текущий.типДок="Полученные") тогда // Фильтр заполнен и в этом разделе будет действовать
		списокТипДок="";
		для каждого типДок из ФильтрТипыДокументов цикл 
			списокТипДок=списокТипДок+типДок.представление+",";
		конеццикла;
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + лев(списокТипДок,СтрДлина (списокТипДок)-1);	
	конецесли;
	Если ФильтрСостояние<>"Все документы" Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", "+ФильтрСостояние;	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОрганизация) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрОрганизация);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОтветственный) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрОтветственный);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрКонтрагентПодключен) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрКонтрагентПодключен);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрМаска) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрМаска);	
	КонецЕсли;	
	//Добавим дополнительные параметры фильтра для текущего раздела
	Если Не ЗначениеЗаполнено(Кэш.Текущий.Раздел) Тогда
		Возврат;
	КонецЕсли;
	НазваниеРаздела = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	ФормаДопФильтра = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок,"Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон", Кэш);
	Если ФормаДопФильтра<>ложь Тогда
		СписокДопЭлементов = ФормаДопФильтра.сбисСписокДопПараметровФильтра();
		Для Каждого Элемент Из СписокДопЭлементов Цикл
			Если Кэш.ПараметрыФильтра.Свойство(Элемент.Значение) и ЗначениеЗаполнено(Кэш.ПараметрыФильтра[Элемент.Значение]) Тогда
				ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(Кэш.ПараметрыФильтра[Элемент.Значение]);				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Лев(ТекущееЗначениеФильтра, 2) = ", " Тогда
		ТекущееЗначениеФильтра = Сред(ТекущееЗначениеФильтра,3);
	КонецЕсли;
	
	Если ТекущееЗначениеФильтра="" тогда
		Элементы.ПанельФильтра.ТекущаяСтраница = Элементы.ПанельФильтра.ПодчиненныеЭлементы["ФильтраНет"];		
	иначе
		Элементы.ПанельФильтра.ТекущаяСтраница = Элементы.ПанельФильтра.ПодчиненныеЭлементы["ФильтрЕсть"];		
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура сбисСохранитьФильтрРаздела(Кэш) Экспорт
	ТекущийФильтр = сбисСохранитьТекущийФильтр(Кэш);
	Если ЗначениеЗаполнено(Кэш.Текущий.Раздел) Тогда
		Кэш.Парам.ФильтрыПоРазделам.Вставить(Кэш.Разделы["р"+Кэш.Текущий.Раздел], ТекущийФильтр);
	КонецЕсли;
КонецПроцедуры
// Навигация
&НаКлиенте
Процедура НавигацияПерваяСтраница(Команда)
	ФильтрСтраница = 1;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура НавигацияПредыдущаяСтраница(Команда)
	ФильтрСтраница = ФильтрСтраница-1;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура НавигацияСледующаяСтраница(Команда)
	ФильтрСтраница = ФильтрСтраница+1;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура НавигацияПоследняяСтраница(Команда)
	ФильтрСтраница = 0;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура ОтметитьВсе()
	ОтметитьВсе = Не ОтметитьВсе;
	Для Каждого Строка Из ЭтаФорма[Кэш.ТаблДок.Имя] Цикл
		Строка.Отмечен = ОтметитьВсе;
	КонецЦикла;
КонецПроцедуры

// Утверждение/Отклонение
&НаКлиенте
Процедура КонтекстноеМенюПолученныеУтвердитьОтклонить(Команда)
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	фрм = сбисНайтиФормуФункции("сбисУтвердитьОтклонить","РаботаСДокументами1С","",Кэш);
	фрм.сбисУтвердитьОтклонить(Кэш,СписокОтмеченныхДокументов, Команда);
КонецПроцедуры
&НаКлиенте
Процедура УтвердитьВыделенные(Команда)
	КонтекстноеМенюПолученныеУтвердитьОтклонить("Утвердить");
КонецПроцедуры
&НаКлиенте
Процедура ОтклонитьВыделенные(Команда)
	КонтекстноеМенюПолученныеУтвердитьОтклонить("Отклонить");
КонецПроцедуры
&НаКлиенте
Функция ОбновитьКонтент(АргументВходящие = Неопределено, ДопПараметры = Неопределено) Экспорт
	// Обновляет данные на главном окне	
	Если Кэш.ТаблДок = "" Тогда   // Если открыта сама обработка, а отправку делаем из карточки документа 1С, то ничего не обновляем
		Возврат "";
	КонецЕсли;
	//Получим имя и значение реквизита по которому будем искать текущую строку
	ЗначениеПоиска = Неопределено;
	Если ТипЗнч(Кэш.ТаблДок.ТекущиеДанные) <> Тип("Неопределено") Тогда
		Если Кэш.ТаблДок.Имя = "Таблица_РеестрДокументов" Тогда
			РеквизитПоиска = "Документ1С";
		Иначе
			РеквизитПоиска = "ИдСБИС";
		КонецЕсли;	
		Кэш.ТаблДок.ТекущиеДанные.Свойство(РеквизитПоиска, ЗначениеПоиска);
	КонецЕсли;
	
	СтруктураДляОбновленияФормы = Кэш.Текущий.Форма.ОбновитьКонтент(Кэш);
	ОбновитьПоляФормы(СтруктураДляОбновленияФормы);
	
	//Найдем строку в новой таблице по имени и значению реквизита
	Если ЗначениеПоиска <> Неопределено и ТипЗнч(СтруктураДляОбновленияФормы) = Тип("Структура") Тогда
		Для Каждого Элемент Из СтруктураДляОбновленияФормы Цикл
			ТаблПоиска = ЭтаФорма[Элемент.Ключ];
			ПараметрыОтбора = Новый Структура(РеквизитПоиска, ЗначениеПоиска);
			Строка = ТаблПоиска.НайтиСтроки(ПараметрыОтбора);
			//Берем первую строку из массива (Т.к. поиск по документу или по ИдСБИС, то строка единственная в таблице)
			Если Строка.Количество() <> 0 Тогда
				НомерСтроки = Строка[0].ПолучитьИдентификатор(); 
				Кэш.ТаблДок.ТекущаяСтрока = НомерСтроки;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура СохранитьПакет(Элемент) 
	// Сохраняет пакеты документов на диск (+ pdf файлы вложений)	
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	СписокПакетов = Новый массив;
	Для Каждого Элемент Из СписокОтмеченныхДокументов Цикл
		СписокПакетов.Добавить(Элемент.Значение.СоставПакета[0].Значение);
	КонецЦикла;
	Кэш.ОбщиеФункции.СохранитьПакетыНаДиск(Кэш, СписокПакетов);	
КонецПроцедуры
//&НаКлиенте
//Функция ДобавитьСбисДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
//	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
//	Для Каждого Элемент Из СписокДопЭлементов Цикл
//		Кэш.ПараметрыФильтра.Вставить(Элемент.Значение);
//	КонецЦикла;
//	
//КонецФункции

&НаКлиенте
Функция Печать(ИдентификаторКоманды, ОбъектыНазначения) Экспорт
	#Если ВебКлиент Тогда 
		Если ПодключитьРасширениеРаботыСФайлами()=Ложь Тогда
			НачатьУстановкуРасширенияРаботыСФайлами(Новый ОписаниеОповещения("сбисПечатьПослеУстановкиРасширенияРаботыСФайлами",ЭтаФорма,ОбъектыНазначения));
		Иначе
			сбисПечатьПослеУстановкиРасширенияРаботыСФайлами(ИдентификаторКоманды, ОбъектыНазначения);   // alo Меркурий
		КонецЕсли;
	#Иначе
		сбисПечатьПослеУстановкиРасширенияРаботыСФайлами(ИдентификаторКоманды, ОбъектыНазначения);	// alo Меркурий
	#КонецЕсли
	
КонецФункции
&НаКлиенте
Функция сбисПечатьПослеУстановкиРасширенияРаботыСФайлами(ИдентификаторКоманды, ОбъектыНазначения) Экспорт	// alo Меркурий
	ГлавноеОкно = ЭтаФорма;	
	
	#Если ВебКлиент Тогда
		ПодключитьРасширениеРаботыСФайлами();
	#КонецЕсли
	
	ЗаполнитьСписокФорм();
	ДополнительныеПараметрыКэша = Новый Структура;
	ДополнительныеПараметрыКэша.Вставить("РежимЗапускаГлавногоОкна", "ПечатнаяФорма");
	КэшПодготовить(ДополнительныеПараметрыКэша);
	СбисПолучитьПарам();
	
	ВсеВключилось = ОпределитьИнтеграциюРабочиеФормы(Кэш,Кэш.Парам);
	Если Не ВсеВключилось Тогда//Не удалось включить интеграцию, либо форма хранения настроек недоступна
		Возврат Ложь;
	//ИначеЕсли Кэш.Парам.СпособОбмена = 1 Тогда
	//	Возврат Неопределено;//Для каталога авторизация не проводится
	КонецЕсли;	

	формаАвторизации = сбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
	Если (Кэш.Парам.ВходПоСертификату и Кэш.Парам.ЗапомнитьСертификат) или (НЕ Кэш.Парам.ВходПоСертификату и Кэш.Парам.ЗапомнитьПароль) или Кэш.Парам.СпособОбмена = 1 Тогда
		УспешнаяАвторизация = формаАвторизации.Авторизоваться(Кэш);
	КонецЕсли;
	// << alo Меркурий
	СбисДополнительныеПараметры  = Новый Структура("ИдентификаторКоманды, Документ",ИдентификаторКоманды, ОбъектыНазначения[0]);
	Если УспешнаяАвторизация = Истина Тогда
		сбисПечатьПослеАвторизации(Истина, СбисДополнительныеПараметры);
	Иначе
		формаАвторизации.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПечатьПослеАвторизации",ЭтаФорма,СбисДополнительныеПараметры);
	// alo Меркурий >>
		формаАвторизации.Открыть();
	КонецЕсли;				
	
КонецФункции
&НаКлиенте
Функция сбисПечатьПослеАвторизации(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзменениеПользователя", Истина);
	Кэш.Текущий.Раздел = "3";
	Кэш.Текущий.ТипДок = Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Параметры.Документ, "Имя");  // alo Меркурий
	Попытка
		Кэш.СБИС.МодульОбъектаКлиент.ЗаполнитьСведенияОПользователеИАккаунте(Новый Структура, Кэш);
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		СбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.СбисИсключение(ИнфОбОшибке, "сбисПослеАвторизации")); 
	КонецПопытки;
	сбисПолучитьУстановитьНастройки(Кэш,Ложь);
	Если Не Кэш.КэшНастроек.ИниВПорядке Тогда
		Возврат Неопределено;
	КонецЕсли;
	Документ = Параметры.Документ;  // alo Меркурий
	//Для каждого Документ из ОбъектыНазначения Цикл
	ИмяДокумента = Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ, "Имя");
	
	//Получим настройки документа
	СписокИни = Новый СписокЗначений;
	Отказ = Ложь;
	сбисСтруктураРазделов = Кэш.ФормаНастроек.ПолучитьСтруктуруРазделов(Кэш,,Отказ);
	Для Каждого сбисРаздел Из сбисСтруктураРазделов Цикл
	
		Если сбисРаздел.Ключ = "БезРаздела" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого сбисПодРаздел Из сбисРаздел.Значение.Список Цикл
		
			Если Не	(	ЗначениеЗаполнено(сбисПодРаздел.Значение.Реестр1С_Тип)
					//И	сбисПодРаздел.Значение.ЕстьЗапросРеестра
					И	сбисПодРаздел.Значение.Реестр1С_Тип = ИмяДокумента) Тогда
					
				Продолжить;
				
			КонецЕсли;
			
			Если Не сбисПодРаздел.Значение.ЕстьЗапросРеестра Тогда 
			
				Для Каждого РазделСЗапросом Из сбисРаздел.Значение.Список Цикл 
				
					Если РазделСЗапросом.Значение.Реестр1С_Тип = ИмяДокумента
						И РазделСЗапросом.Значение.ЕстьЗапросРеестра
						И сбисПодРаздел.Значение.РеестрСБИС_Тип = РазделСЗапросом.Значение.РеестрСБИС_Тип Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе     
				РазделСЗапросом = сбисПодРаздел;
			КонецЕсли;
			ИмяИни = РазделСЗапросом.Значение.Реестр1С_Название;
			Если Не ЗначениеЗаполнено(ИмяИни) Тогда
				ИмяИни = ИмяДокумента;
			ИначеЕсли СписокИни.НайтиПоЗначению(РазделСЗапросом.Ключ) = Неопределено Тогда 
				СписокИни.Добавить(РазделСЗапросом.Ключ, ИмяИни);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если СписокИни.Количество() = 0 тогда
		Если Кэш.ини.Свойство(ИмяДокумента) Тогда	
			СписокИни.Добавить(ИмяДокумента, ИмяДокумента);
		Иначе
			Сообщить("Выгрузка данного типа документов не поддерживается!");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СписокИни.Количество() = 1 Тогда
	// << alo Меркурий
		сбисКомандаПослеВыбораИни(СписокИни[0].Значение, Параметры);
	Иначе
		Оповещение = Новый ОписаниеОповещения("сбисКомандаПослеВыбораИни", ЭтаФорма, Параметры);
		ОткрытьФорму(СбисПутьКФормамОбработки() + "Форма_ВыборИзСписка",Новый Структура("СписокДляВыбора, Заголовок",СписокИни, "Выберите настройку для формирования документов"),,,,,Оповещение);
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисКомандаПослеВыбораИни(Результат, Параметры) Экспорт
	Если Параметры.ИдентификаторКоманды = "sbis1cПогаситьВСД" Тогда
		сбисПогаситьВСД(Результат, Параметры.Документ);
	иначе 
		сбисПечатьПослеВыбораИни(Результат, Параметры);
	Конецесли;
КонецФункции 		// alo Меркурий >>
&НаКлиенте
Функция сбисПечатьПослеВыбораИни(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Документ = Параметры.Документ;
	Ини = Кэш.ФормаНастроек.Ини(Кэш, Результат);
	Кэш.Текущий.ТипДок = Результат;
	
		
	//Подготовим фильтр для запроса документов
	ПараметрыФильтра = Новый Структура;
	ПараметрыФильтра.Вставить( "ФильтрДокумент", Документ); 		
	// << alo Меркурий 
	Контекст=новый структура("ини",Новый структура("Документ",новый структура("РассчитанноеЗначение", Документ)));
	РеквизитДата = "";
	РеквизитОтветственный = "";
	Для Каждого мФайл Из Ини.мФайл Цикл
		Если мФайл.Значение.Свойство("Документ_Дата") Тогда
			РеквизитДата = мФайл.Значение.Документ_Дата.Значение;
		КонецЕсли;
		Если мФайл.Значение.Свойство("Ответственный") Тогда
			РеквизитОтветственный = мФайл.Значение.Ответственный.Значение;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(РеквизитДата) Тогда
		ДатаНач = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(РеквизитДата,Контекст);
		ПараметрыФильтра.Вставить( "ФильтрДатаНач", ДатаНач); 
		ПараметрыФильтра.Вставить( "ФильтрДатаКнц", ДатаНач); 
	иначе
		ПараметрыФильтра.Вставить( "ФильтрДатаНач", ФильтрДатаНач); 
		ПараметрыФильтра.Вставить( "ФильтрДатаКнц", ФильтрДатаКнц); 
	КонецЕсли;
	ПараметрыФильтра.Вставить( "ФильтрКонтрагент", "");
	ПараметрыФильтра.Вставить( "ФильтрКонтрагентПодключен", "");
	ПараметрыФильтра.Вставить( "ФильтрОрганизация", "");
	ПараметрыФильтра.Вставить( "ФильтрСостояние", "Все документы");
	ИниКонфигурация = Кэш.ФормаНастроек.Ини(Кэш, "Конфигурация");
	Если ИниКонфигурация.Свойство("Ответственные") Тогда
		ИмяСправочника = СокрЛП(Сред(ИниКонфигурация.Ответственные.Значение, Найти(ИниКонфигурация.Ответственные.Значение, ".")+1));
		ТипСправочника = "СправочникСсылка." + ИмяСправочника;
	Иначе
		ТипСправочника = "СправочникСсылка.Пользователи";
	КонецЕсли;
	ОписаниеТипа = Новый ОписаниеТипов(ТипСправочника);
	ПараметрыФильтра.Вставить( "ФильтрОтветственный", ОписаниеТипа.ПривестиЗначение()); // alo Меркурий >>
	ПараметрыФильтра.Вставить( "ФильтрМаска", "");
	ПараметрыФильтра.Вставить( "РазмерСтраницы", 1 ); 
	ПараметрыФильтра.Вставить( "Страница", 1 );
	ПараметрыФильтра.Вставить( "ВсеДокументы", Истина );
	ПараметрыФильтра.Вставить( "ФильтрЕстьЕще", Ложь );
	
	Если Кэш.ПараметрыФильтра.Количество()>0 Тогда
		ПараметрыФильтра.Вставить( "Пользовательские", Новый Структура);
		Для Каждого Элемент Из Кэш.ПараметрыФильтра Цикл
			ПараметрыФильтра.Пользовательские.Вставить( Элемент.Ключ, Элемент.Значение);		
		КонецЦикла;
	КонецЕсли;
	
	//Получим массив выгружаемых документов по запросу
	ТекстЗапроса = Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапросСпискаДокументов", Ини, Кэш);
	
	МассивДокументов1С = Кэш.ОбщиеФункции.ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтра, КаталогНастроек);
	//Подготовим список документов
	СписокОтмеченныхДокументов = Новый СписокЗначений;
	Для каждого СтрокаТЗ из МассивДокументов1С Цикл
		СписокОтмеченныхДокументов.Добавить(СтрокаТЗ);
		ТекущаяСтрока = СтрокаТЗ;
		ТекущийРаздел = Ини.ДокументРаздел.Значение;
		//Откроем пакет документов
		ПозЗпт = Найти(ТекущийРаздел, ",");
		Если ПозЗпт>0 Тогда
			ТекущийРаздел = Лев(ТекущийРаздел, ПозЗпт-1);	
		КонецЕсли;
		фрм = сбисНайтиФормуФункции("ПоказатьДокумент","Раздел_"+СтрЗаменить(ТекущийРаздел, "'", "")+"_Шаблон",, Кэш);
		//ГлавноеОкно.Кэш.ГлавноеОкно = ГлавноеОкно;
		фрм.ПоказатьДокумент(Кэш, ТекущаяСтрока);	
		
	КонецЦикла;	
		
		//Отправим документы			
		//фрм = ГлавноеОкно.сбисНайтиФормуФункции("ОтправитьДокументы","Документ_"+ИмяДокумента,"Документ_Шаблон");
		//фрм.ОтправитьДокументы(ГлавноеОкно.Кэш, СписокОтмеченныхДокументов);
		
		//КонецЦикла;
КонецФункции
// << alo Меркурий
&НаКлиенте
Функция сбисПогаситьВСД(ИмяИни, Документ)
	Кэш.Текущий.Раздел = "1";
	ПолучилосьАвтоматически = Ложь;
	Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяИни);
	Если ЗначениеЗаполнено(Ини) И Ини.свойство("мФайл") И Ини.мФайл.свойство("АктРасхождение") Тогда
		РеквизитДатаВх = ?(Ини.Свойство("Документ_ДатаВх"), Ини.Документ_ДатаВх.Значение, ?(Ини.Свойство("Документ_Дата"), Ини.Документ_Дата.Значение, ""));
		РеквизитНомерВх = ?(Ини.Свойство("Документ_НомерВх"), Ини.Документ_НомерВх.Значение, ?(Ини.Свойство("Документ_Номер"), Ини.Документ_Номер.Значение, ""));
		Если ЗначениеЗаполнено(РеквизитДатаВх) ИЛИ ЗначениеЗаполнено(РеквизитНомерВх) Тогда
			ЗаписейНаСтранице = 2;
			ФильтрСтраница = 1;
			Контекст=новый структура("ини, Документ",Ини,Документ);
			
			Если Ини.Свойство("Контрагент_Роль") Тогда
				РольКонтрагента = СтрЗаменить(Ини.Контрагент_Роль.Значение,"'","");
				Если ЗначениеЗаполнено(РольКонтрагента) И Ини.мСторона.Свойство(РольКонтрагента) Тогда
					ФильтрКонтрагент = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(Ини.мСторона[РольКонтрагента].Сторона.Значение,Контекст);
				КонецЕсли;
			КонецЕсли;
			
			РольОрганизации = ""; 
			Если Ини.Свойство("Организация_Роль") Тогда
				РольОрганизации = СтрЗаменить(Ини.Организация_Роль.Значение,"'","");
			ИначеЕсли Ини.Свойство("НашаОрганизация_Роль") Тогда
				РольОрганизации = СтрЗаменить(Ини.НашаОрганизация_Роль.Значение,"'","");
			КонецЕсли;
			Если ЗначениеЗаполнено(РольОрганизации) И Ини.мСторона.Свойство(РольОрганизации) Тогда
				ФильтрОрганизация = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(Ини.мСторона[РольОрганизации].Сторона.Значение,Контекст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитДатаВх) Тогда
				ФильтрДатаНач = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(РеквизитДатаВх,Контекст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитНомерВх) Тогда
				ФильтрМаска = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(РеквизитНомерВх,Контекст);
			КонецЕсли;
				
			БазоваяИнтеграция = ?(Кэш.ИнтеграцияИмя = "ExtSDK2", Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK, Кэш.Интеграция);
	
			filter = БазоваяИнтеграция.ПолучитьФильтр(ЭтаФорма, Новый Структура("Тип", "ДокОтгрВх"));
			ПакетыСБИС = Кэш.Интеграция.сбисПолучитьСписокДокументовПоФильтру(Кэш, filter, Кэш.ГлавноеОкно); 
			Если ЗначениеЗаполнено(ПакетыСБИС) И ПакетыСБИС.Таблица_РеестрДокументов.количество()=1 Тогда
				ПакетСБИС = ПакетыСБИС.Таблица_РеестрДокументов[0];
				фрм = сбисНайтиФормуФункции("ЗаписатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
						СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения", ПакетСБИС.ИдСБИС,"");
				фрм.ЗаписатьПараметрыДокументаСБИС(СтруктураСвойств, Документ, Кэш.Ини.Конфигурация, КаталогНастроек);
				
				ПолныйСоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ПакетСБИС.ИдСБИС);
				
				фрм = сбисНайтиФормуФункции("СформироватьРасхождениеНажатие","ФормаПросмотрДокумента","", Кэш);
				фрм.МестныйКэш = Кэш;
				фрм.СоставПакета = Кэш.ОбщиеФункции.РазобратьСтруктуруДокументаСбис(ПолныйСоставПакета, Кэш);
				фрм.ЗаполнитьТаблицуДокументов(фрм.СоставПакета);
				фрм.СформироватьРасхождениеНажатие(неопределено);
				Если фрм.СоставПакета.Вложение.количество()>0 Тогда	
					Вложение = фрм.СоставПакета.Вложение[фрм.СоставПакета.Вложение.количество()-1];
					Если Вложение.Тип = "АктРасхождение" Тогда
						Кэш.Интеграция.СБИСЗаписатьВложения(Кэш, фрм.СоставПакета, Вложение);
						Сообщить("Обновлен документ "+фрм.СоставПакета.Название);
						ОткрытьДокументОнлайнПоПакету(фрм.СоставПакета, Кэш);
						ПолучилосьАвтоматически= Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если не ПолучилосьАвтоматически Тогда    // открыть форму для ручной работы и инструкцию
		ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul/vsd?tb=tab2");
		ПерейтиВРаздел("АккордеонДокОтгрВх11");
		Кэш.ГлавноеОкно.Открыть();
	КонецЕсли;
КонецФункции	// alo Меркурий >>

&НаКлиенте
Процедура ВерсияНажатие(Элемент, СтандартнаяОбработка)
	// Открывает хистори обработки.
	ФормаНовости = сбисПолучитьФорму("ФормаНовости",,,ЭтаФорма);
	ФормаНовости.Открыть();
	СтандартнаяОбработка = Ложь;
КонецПроцедуры  

&НаКлиенте
Процедура ВерсияИнтеграцииНажатие(Элемент, СтандартнаяОбработка)
	ЗапуститьПриложение("https://sbis.ru/help/integration/sdk");
КонецПроцедуры
 
Процедура сбисЗаполнитьСписокСправочника(Ини) Экспорт
	// Заполняет дерево значений по справочнику
	ИмяСправочника = СокрЛП(Сред(Ини.СправочникТип.Значение, Найти(Ини.СправочникТип.Значение, ".")+1));
	Если Ини.Свойство("ЗапросСпискаЭлементов") Тогда
		ТекстЗапроса = СокрЛП(Ини.ЗапросСпискаЭлементов.Значение);
		Запрос = Новый Запрос(Сред(ТекстЗапроса,2,СтрДлина(ТекстЗапроса)-2));
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ЗаписьСправочника.Ссылка,ЗаписьСправочника.Наименование,ЗаписьСправочника.Код, Ложь КАК Отмечен ИЗ Справочник."+ИмяСправочника+" КАК ЗаписьСправочника ГДЕ (НЕ(ЗаписьСправочника.ЭтоГруппа) и НЕ ЗаписьСправочника.ПометкаУдаления)ИТОГИ ПО ЗаписьСправочника.Ссылка ТОЛЬКО ИЕРАРХИЯ");
	КонецЕсли;
	Дерево = РеквизитФормыВЗначение("Таблица_РеестрСправочников"); // заполняем Дерево 
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Дерево, "Таблица_РеестрСправочников");
КонецПроцедуры

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	// Отмечает вложенные записи дерева значений при отметке группы
	ТекущиеДанные = Элементы.Таблица_РеестрСправочников.ТекущиеДанные;
	ПроставитьПометкиВниз(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекущиеДанные)
	// Отмечает вложенные записи дерева значений при отметке группы (рекурсивно)
	Потомки = ТекущиеДанные.ПолучитьЭлементы();
	Значение = ТекущиеДанные.Отмечен;
	Для каждого Потомок из Потомки Цикл
		Потомок.Отмечен = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыбранныеСтроки(СписокОтмеченных, Потомки)
	// Получает выбранные строки дерева значений
	Для каждого Потомок из Потомки Цикл
		ПотомкиПотомка = Потомок.ПолучитьЭлементы();
		Если ПотомкиПотомка.Количество()=0 Тогда
			Если Потомок.Отмечен Тогда
				СписокОтмеченных.Добавить(Потомок.Ссылка);
			КонецЕсли;
		Иначе
			ПолучитьВыбранныеСтроки(СписокОтмеченных,ПотомкиПотомка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеДерево(Команда)
	// Отмечает все записи в дереве значений
	ОтметитьВсе = Не ОтметитьВсе;
	Потомки = Таблица_РеестрСправочников.ПолучитьЭлементы();
	Для Каждого Потомок Из Потомки Цикл
		Потомок.Отмечен = ОтметитьВсе;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаписьСправочника(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// открывает карточку справочника
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

//Список клиентских форм формируется при подключении заплаток
&НаКлиенте
Процедура ОтправитьКорреспонденцию(Команда)
	фрм = сбисНайтиФормуФункции("ПоказатьФорму","ФормаОтправкиКорреспонденции","",Кэш);	
	фрм.ПоказатьФорму(Кэш);
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиНаСервере(имяТаблицы, Знач ВидимыеКолонки, Ини) экспорт  // alo СтатусГос
	// Создание ТаблицыЗначений с описанием колонок
	ЭлементТаблица = Элементы[имяТаблицы];
		
	МассивРеквизитовФормы = Новый Массив;
	Для Каждого Колонка Из ВидимыеКолонки Цикл
		Колонка.Элемент = ЭлементТаблица.ПодчиненныеЭлементы.Найти(имяТаблицы+Колонка.Имя);
		если ини.Свойство("Реестр1С_"+Колонка.Имя) Тогда
			Колонка.Ини = ини["Реестр1С_"+Колонка.Имя];
		КонецЕсли;
		Если Колонка.Элемент = Неопределено Тогда
			ОписаниеТипа = Неопределено;
			Если Колонка.Ини.Свойство("Тип") Тогда
				Если Колонка.Ини.Тип = "Строка" Тогда
		 			КвалификаторыСтроки = Новый КвалификаторыСтроки;
	    			ОписаниеТипа = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
				Иначе
	    			ОписаниеТипа = Новый ОписаниеТипов(Колонка.Ини.Тип);	// например "СправочникСсылка.Сотрудники"
	 			КонецЕсли;
	 		КонецЕсли;
			Если ОписаниеТипа <> Неопределено Тогда
				МассивРеквизитовФормы.Добавить(Новый РеквизитФормы(Колонка.Имя, ОписаниеТипа, имяТаблицы));
			Иначе
				Сообщить("Необходимо описание типа поля "+Колонка.Имя);
			Конецесли;
		Конецесли;
    КонецЦикла;
    ИзменитьРеквизиты(МассивРеквизитовФормы);	    // Добавление в реквизитов колонок ТаблицыЗначений
		
	индекс = 0;
	Для Каждого Колонка Из ВидимыеКолонки Цикл
		Если Колонка.Элемент = Неопределено Тогда
			СледующийЭлемент = Неопределено;
			Если индекс+1 < ВидимыеКолонки.Количество() Тогда
				СледующийЭлемент = ВидимыеКолонки[индекс+1].Элемент;
			КонецЕсли;
			Колонка.Элемент = Элементы.Вставить(имяТаблицы+Колонка.Имя, Тип("ПолеФормы"),ЭлементТаблица, СледующийЭлемент);
			Колонка.Элемент.Ширина = 10;//Колонка.Элемент.ШиринаЭлемента = 10;
		КонецЕсли;
		Колонка.Элемент.Видимость = Истина;
		Если Колонка.Ини.Свойство("Ширина") Тогда
			Попытка	// у существующих поле переключателей и картинок такого свойства нет
				Колонка.Элемент.Ширина = Колонка.Ини.Ширина;
			Исключение;
			КонецПопытки
		КонецЕсли;
		Если Колонка.Ини.Свойство("Заголовок") Тогда
			Колонка.Элемент.Заголовок = Колонка.Ини.Заголовок;
		КонецЕсли;
		Если Колонка.Ини.Свойство("Значение") И не ЗначениеЗаполнено(Колонка.Элемент.ПутьКДанным) Тогда
			Колонка.Элемент.ПутьКДанным = имяТаблицы+"."+Колонка.Ини.Значение;
		КонецЕсли;
		индекс = индекс +1;
	КонецЦикла;	
КонецПроцедуры

//Процедура управляет включением/отключением вывода логов
&НаКлиенте
Процедура сбисПереключитьОтладку()
	Если РежимОтладки Тогда
		Кэш.Интеграция.ВключитьОтладку(Кэш, КаталогОтладки);
	Иначе
		Кэш.Интеграция.ОтключитьОтладку(Кэш);
	КонецЕсли;
	
	Кэш.Парам.РежимОтладки	= РежимОтладки;
	Кэш.Парам.КаталогОтладки= КаталогОтладки;
	сбисЭлементФормы(ЭтаФорма, "КаталогОтладки").Видимость = РежимОтладки;
	//+++ МАИ 09.09.2021 Переопределяем сервер обновлений, если пользователь в режиме отладки указал другой
	сбисЭлементФормы(ЭтаФорма, "АдресСервисаОбновлений").Видимость = РежимОтладки;
	Если НЕ РежимОтладки ИЛИ АдресСервисаОбновлений = "" Тогда
		АдресСервисаОбновлений = "update.sbis.ru";
		Кэш.СБИС.ПараметрыИнтеграции.Вставить("АдресСервисаОбновлений", АдресСервисаОбновлений);
	КонецЕсли;
	//--- МАИ 09.09.2021
КонецПроцедуры

//Функция складывает в структуру текущие значения фильтра для последующего их восстановления	
&НаКлиенте
Функция сбисВосстановитьФильтр(Кэш, СтруктураФильта) Экспорт
	ФильтрПериод = СтруктураФильта.ФильтрПериод;
	// если изменилась текущая дата, надо обновить период
	Если(ФильтрПериод="За сегодня") Тогда
		ФильтрДатаНач = ТекущаяДата();
		ФильтрДатаКнц = ТекущаяДата();
	ИначеЕсли(ФильтрПериод = "За последний месяц") Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,-1);
	ИначеЕсли(ФильтрПериод = "За последние полгода") Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,-6);
	ИначеЕсли(ФильтрПериод = "За последний год") Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,-12);
	Иначе
		ФильтрДатаНач = СтруктураФильта.ФильтрДатаНач;
		ФильтрДатаКнц = СтруктураФильта.ФильтрДатаКнц;
	КонецЕсли;
	ФильтрСостояние = СтруктураФильта.ФильтрСостояние;
	ФильтрКонтрагент = СтруктураФильта.ФильтрКонтрагент;
	ФильтрКонтрагентПодключен = СтруктураФильта.ФильтрКонтрагентПодключен;
	ФильтрКонтрагентСФилиалами = ?(СтруктураФильта.Свойство("ФильтрКонтрагентСФилиалами"), СтруктураФильта.ФильтрКонтрагентСФилиалами, Ложь);
	ФильтрОрганизация = СтруктураФильта.ФильтрОрганизация;
	ФильтрСтраница = СтруктураФильта.ФильтрСтраница;
	ФильтрОтветственный = СтруктураФильта.ФильтрОтветственный;
	ФильтрТипыДокументов = СтруктураФильта.ФильтрТипыДокументов;
	ФильтрМаска = СтруктураФильта.ФильтрМаска;
	
	//Заполним дополнительные параметры фильтра
	Если СтруктураФильта.Свойство("ПараметрыФильтра") Тогда
		Для Каждого Элемент Из СтруктураФильта.ПараметрыФильтра Цикл
			Кэш.ПараметрыФильтра.Вставить(Элемент.Ключ,Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ФильтрыПоРазделам = Настройки.Получить("ФильтрыПоРазделам");
	НастройкиКриптографии = Настройки.Получить("НастройкиКриптографии");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыТурбоРежим(Команда)
	Если ОтметитьВсе = Истина и ЗаписейНаСтранице1С<>"все" и (ФильтрСтраница<>1 или ФильтрЕстьЕще) Тогда // отмечены все записи на странице и есть еще страницы
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "С текущей страницы");
		Кнопки.Добавить(2, "Все документы");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьВыбранныеДокументыТурбоРежим",ЭтаФорма),"Отправить документы только с текущей страницы или все документы списка?", Кнопки);
	Иначе
		ОтправитьВыбранныеДокументыТурбоРежим(1, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПереключенияАккаунта();
КонецПроцедуры

&НаКлиенте
Функция СбисПутьКФормамОбработки() Экспорт
	Возврат Сред(ЭтаФорма.ИмяФормы, 1, СтрДлина(ЭтаФорма.ИмяФормы) - 16);
КонецФункции

